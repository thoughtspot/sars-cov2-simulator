{"version":3,"sources":["components/slider/slider.tsx","components/controls/controls-data.ts","api.ts","components/region-select/region-select.tsx","components/controls/controls.tsx","services/viewport-service.ts","components/chart/chart.tsx","components/table/table.tsx","components/shudown-range/shutdown-range.tsx","components/simulator/use-generate-config.ts","components/simulator/data-generator.ts","components/simulator/optimal-weeks-generator.ts","components/simulator/simulator.tsx","components/headline/headline.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","slider","width","Slider","title","onChange","percent","tooltip","props","classes","getValue","value","undefined","Grid","container","direction","alignItems","spacing","Tooltip","placement","item","Typography","min","className","aria-labelledby","valueLabelDisplay","valueLabelFormat","onChangeCommitted","event","name","max","id","variant","sliders","step","defaultValue","USStateInfectedData","Map","countryInfectedData","USStatePopulationData","countryPopulationData","stateCodeMap","useInitCovidData","React","useState","loaded","setLoaded","countryStateData","forEach","country","state","set","population","stateCodeMapping","Code","State","Promise","all","initStateCovidData","initCountryCovidData","then","console","log","catch","getCovidData","placeName","parseInt","get","getPopulationData","a","fetch","resp","json","responseData","stateData","positive","death","allCountryData","data","countryData","latest_data","confirmed","recovered","deaths","Actions","theme","createStyles","formControl","minWidth","RegionSelect","createRegionData","regionMap","regionArray","key","push","FormControl","InputLabel","label","Select","native","initialState","reduce","sliderValues","infectionStartDate","Date","totalPopulation","totalHospitalBeds","root","paddingTop","paddingLeft","paddingRight","divider","marginTop","marginBottom","paddingBottom","textItemStyle","reducer","action","type","CHANGE_SLIDER_VALUE","sliderName","CHANGE_START_DATE","CHANGE_POPULATION","CHANGE_BEDS","Number","CHANGE_INITIAL_NUMBER_OF_CASES","initialNumberOfCases","Controls","useReducer","dispatch","useEffect","onSliderChange","onPopulationChange","target","onNumberOfCasesChanged","Paper","elevation","style","TextField","map","isMobile","window","innerWidth","chartContainer","height","zoom","Chart","config","containerProps","highcharts","Highcharts","options","gridContainer","renderGridCell","isShutdown","cellElement","bgColor","text","Table","columns","customizeCellValue","cellInfo","shortNum","elementAttr","class","allowColumnReordering","allowColumnResizing","showRowLines","dataSource","showBorders","c","dataField","cellRender","customizeText","mode","padding","marginLeft","marginLeftAuto","ShutdownRange","shutdownWeeks","startDate","computeOptimalWeeks","onDoNotOptimizeToggle","ranges","setState","isWeekView","setIsWeekView","setShutdownState","shutdown","range","start","differenceInWeeks","end","i","Array","fill","getShutdownWeeks","currentRange","length","addWeeks","getShutdownRanges","removeRange","idx","splice","changeRange","date","onWeekToggle","evt","checked","justify","Checkbox","color","week","Switch","IconButton","onClick","aria-label","Button","startIcon","rangeStart","_","Week","params","weekStartDate","weekNum","healthy","newInfected","totalInfected","currentlyInfected","dead","hospitalized","Object","assign","this","generateData","controls","R0","shutdownR0","mortalityRate","mortalityRateOverflow","hospitalizationRate","hospitalStayInWeeks","lastWeekNum","weeks","maxICUBeds","shutdowns","r","fractionHealthy","mortality","weightedAverage","Math","floor","round","p0","p1","w0","w1","CHANGE_CONTROL","CHANGE_SHUTDOWN","generateChartConfig","weeksToGo","currentWeekNum","differenceInCalendarWeeks","getWeeksToGo","series","obj","keys","visible","x","y","values","createSeries","subtitle","yAxis","gridLineWidth","xAxis","plotBands","s","from","to","plotLines","plotOptions","line","lineWidth","formatter","format","responsive","rules","condition","maxWidth","chartOptions","getOptimalWeeks","currentNewInfected","shutdownsToZero","ceil","getDeprecatingOptimalWeeks","current","next","next2","computeNextWeek","prev","prev2","prev3","result","flexGrow","Headline","leftPanel","flex","grow","flexBasis","minHeight","contentContainer","content","display","flexDirection","noMobile","TABLE_COLUMNS","initialShutdownWeeks","Simulator","useGenerateConfig","onControlChange","onShutdownChange","optimalWeeks","setOptimalWeeks","isTableView","setIsTableView","doNotOptimize","setDoNotOptimize","utils","DateFnsUtils","numWeeks","isNaN","wrap","menuButton","marginRight","urlParams","qs","parse","location","search","App","covidDataLoaded","isEmbed","embed","AppBar","position","Toolbar","edge","Container","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fd55dcf1.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport {Slider as MaterialSlider, SliderProps as MaterialSliderProps} from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { Grid } from '@material-ui/core';\nimport './slider.css';\n\ninterface SliderProps {\n    title: string;\n    percent?: boolean;\n    onChange: (name: string, value: number) => void;\n    tooltip?: string;\n}\n\nconst useStyles = makeStyles({\n    slider: {\n      width: 150,\n    },\n  });\n  \n\nexport const Slider: React.FC<SliderProps & Omit<MaterialSliderProps, 'onChange'>> = ({title, onChange, percent = false, tooltip, ...props}) => {\n    const classes = useStyles()\n\n    const getValue = (value: number | undefined) => {\n        if(value === undefined) {\n            return '';\n        }\n\n        if(percent) {\n            return `${value}%`;\n        }\n        return value;\n    }\n\n    const onSliderChange = (event, value?) => {\n        onChange(props.name, value);\n    }\n\n    return (\n        <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={0}>\n            <Tooltip title={tooltip} placement=\"right\">\n                <Grid item container direction=\"row\" spacing={1} alignItems=\"center\">\n                    <Grid item>\n                        <Typography>\n                            {getValue(props.min)}\n                        </Typography>\n                    </Grid>\n                    <Grid item className={classes.slider}>\n                        <MaterialSlider\n                            aria-labelledby=\"discrete-slider\"\n                            valueLabelDisplay=\"on\"\n                            valueLabelFormat={getValue}\n                            onChangeCommitted={onSliderChange}\n                            {...props}\n                        />\n                    </Grid>\n                    <Grid>\n                        <Typography>\n                            {getValue(props.max)}\n                        </Typography>\n                    </Grid>\n                    \n                </Grid>\n            </Tooltip>\n\n            <Grid item>\n                <Typography id=\"discrete-slider\" variant=\"caption\">\n                    {title}\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}","export const sliders = [\n    {\n        title: 'Average spread (R0)',\n        name: 'R0',\n        min: 0,\n        max: 3.0,\n        step: 0.1,\n        defaultValue: 2.2,\n        tooltip: 'Average number of people a single person infects.'\n    },\n    {\n        title: 'Average spread shutdown (R0)',\n        name: 'shutdownR0',\n        min: 0,\n        max: 3.0,\n        step: 0.1,\n        defaultValue: 0.6,\n        tooltip: 'Average number of people a single person infects\\n when we are in a shutdown.'\n    },\n    {\n        title: 'Mortality Rate',\n        name: 'mortalityRate',\n        min: 0,\n        max: 5.0,\n        step: 0.1,\n        defaultValue: 0.5,\n        percent: true,\n        tooltip: 'Percentage of people who die due to the disease.'\n    },\n    {\n        title: 'Mortality Rate Overflow',\n        name: 'mortalityRateOverflow',\n        min: 0,\n        max: 7.0,\n        step: 0.5,\n        defaultValue: 3.0,\n        percent: true,\n        tooltip: 'Percentage of people who die due to the disease, when the medical system is over stressed.'\n    },\n    {\n        title: 'Hospitalization Rate',\n        name: 'hospitalizationRate',\n        min: 0,\n        max: 25,\n        step: 1,\n        defaultValue: 15,\n        percent: true,\n        tooltip: 'Percentage of people who need hospitalization.'\n    },\n    {\n        title: 'Hospital stay in weeks',\n        name: 'hospitalStayInWeeks',\n        min: 0,\n        max: 3,\n        step: 0.5,\n        defaultValue: 1,\n        tooltip: 'Number of weeks a patient needs to stay in the hospital for.'\n    }\n];","import React from 'react';\nimport {default as countryStateData} from \"./generated-data/country-state-data.json\";\nimport {default as stateCodeMapping} from \"./generated-data/us-country-code-data.json\";\n\nlet USStateInfectedData = new Map();\nlet countryInfectedData = new Map();\nexport let USStatePopulationData = new Map();\nexport let countryPopulationData = new Map();\nlet stateCodeMap = new Map();\nexport const UnitedStates= \"USA\";\n\nexport const useInitCovidData = () => {\n    let [loaded, setLoaded] = React.useState(false);\n    if(loaded) {\n        return loaded;\n    }\n    initPopulationData();\n    initStateMappingCode();\n    initCovidData()\n        .then(() => {\n            setLoaded(true);\n        });\n    return loaded;\n};\n\nexport const getCovidData = (placeName: string) => {\n    return parseInt(USStateInfectedData.get(placeName) || countryInfectedData.get(placeName) || 0);\n};\n\nexport const getPopulationData = (placeName: string) => {\n    return parseInt(countryPopulationData.get(placeName) || USStatePopulationData.get(placeName));\n};\n\nfunction initPopulationData() {\n    countryStateData.forEach(value => {\n         value.country != value.state\n             ? USStatePopulationData.set(value.state, value.population)\n             : countryPopulationData.set(value.country,value.population);\n    });\n}\n\nfunction initStateMappingCode() {\n    stateCodeMapping.forEach((value) => {\n        stateCodeMap.set(value.Code, value.State);\n    })\n\n}\n\nasync function initStateCovidData() {\n    let resp = await fetch(\"https://cors-anywhere.herokuapp.com/https://covidtracking.com/api/states\");\n    let responseData = await resp.json();\n    for(let stateData of responseData) {\n        USStateInfectedData.set(stateCodeMap.get(stateData.state), stateData.positive - stateData.death);\n    }\n}\n\nasync function initCountryCovidData() {\n    let resp = await fetch('https://cors-anywhere.herokuapp.com/https://corona-api.com/countries');\n    let responseData = await resp.json();\n    let allCountryData = responseData.data;\n    for(let countryData of allCountryData) {\n        let latest_data = countryData.latest_data;\n        countryInfectedData.set(countryData.name, latest_data.confirmed - latest_data.recovered - latest_data.deaths )\n    }\n}\n\n\nfunction initCovidData() {\n    return Promise.all([\n        initStateCovidData(),\n        initCountryCovidData()\n    ]).then(() => {\n        console.log('Done');\n    }).catch(()=> {\n        console.log(\"Error while fetching data\");\n    });\n\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport {countryPopulationData, UnitedStates, USStatePopulationData} from \"../../api\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            minWidth: 120,\n        },\n    }),\n);\n\nexport default function RegionSelect(props) {\n    const classes = useStyles();\n\n    const createRegionData = (regionMap) => {\n        let regionArray = []\n        regionMap.forEach((value, key) => {\n            regionArray.push(<option value={key}>{key}</option>);\n        });\n        return regionArray;\n    };\n\n    return (\n        <div>\n            <FormControl className={classes.formControl}>\n                <InputLabel>{props.label}</InputLabel>\n                <Select native defaultValue=\"United States\" onChange={props.onChange}>\n                    <option value={UnitedStates}>{UnitedStates}</option>\n                    <optgroup label=\"States in USA\">\n                        { createRegionData(USStatePopulationData)}\n                    </optgroup>\n                    <optgroup label=\"Countries\">\n                        {createRegionData(countryPopulationData)}\n                    </optgroup>\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport { Button, Typography } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport {\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\nimport {Slider} from '../slider/slider';\nimport {sliders} from './controls-data';\nimport RegionSelect from \"../region-select/region-select\";\nimport {\n    countryPopulationData,\n    getCovidData,\n    getPopulationData,\n    UnitedStates\n} from \"../../api\";\n\nexport interface ControlState {\n    R0?: number;\n    shutdownR0?: number;\n    mortalityRate?: number;\n    mortalityRateOverflow?: number;\n    hospitalizationRate?: number;\n    hospitalStayInWeeks?: number;\n    infectionStartDate?: Date;\n    initialNumberOfCases?: number;\n    totalPopulation?: number;\n    totalHospitalBeds?: number;\n}\n\ninterface Props {\n    onChange?: (controls: ControlState) => void;\n}\n\nenum Actions {\n    CHANGE_SLIDER_VALUE,\n    CHANGE_START_DATE,\n    CHANGE_POPULATION,\n    CHANGE_INITIAL_NUMBER_OF_CASES,\n    CHANGE_BEDS\n}\n\nconst initialState: ControlState = sliders.reduce((sliderValues, slider) => {\n    sliderValues[slider.name] = slider.defaultValue;\n    return sliderValues;\n}, {});\ninitialState.infectionStartDate = new Date();\ninitialState.totalPopulation = countryPopulationData.get(UnitedStates);\ninitialState.totalHospitalBeds = 1000000;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingTop: theme.spacing(4),\n      paddingLeft: theme.spacing(6),\n      paddingRight: theme.spacing(2)\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    title: {\n        paddingBottom: 0\n    }\n  }),\n);\n\nconst textItemStyle = { paddingTop: 12, paddingBottom: 12 };\n\n\nfunction reducer(state, action) {\n    switch(action.type) {\n        case Actions.CHANGE_SLIDER_VALUE:\n            return {\n                ...state,\n                [action.sliderName]: action.value\n            }\n        case Actions.CHANGE_START_DATE:\n            return {\n                ...state,\n                infectionStartDate: action.infectionStartDate\n            }\n        case Actions.CHANGE_POPULATION:\n            return {\n                ...state,\n                totalPopulation: action.value\n            }\n        case Actions.CHANGE_BEDS:\n            return {\n                ...state,\n                totalHospitalBeds: Number(action.value)\n            }\n        case Actions.CHANGE_INITIAL_NUMBER_OF_CASES:\n            return {\n                ...state,\n                initialNumberOfCases: Number(action.value)\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport const Controls: React.FC<Props> = ({ onChange }) => {\n    const classes = useStyles();\n    initialState.initialNumberOfCases = getCovidData(UnitedStates);\n    initialState.totalPopulation = getPopulationData(UnitedStates);\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n\n    useEffect(() => {\n        onChange(state);\n    }, [state]);\n\n    const onSliderChange = (sliderName: string, value?) => {\n        dispatch({\n            type: Actions.CHANGE_SLIDER_VALUE,\n            sliderName,\n            value\n        });\n    };\n\n    const onDateChange = (infectionStartDate: Date) => {\n        dispatch({\n            type: Actions.CHANGE_START_DATE,\n            infectionStartDate\n        })\n    };\n\n    const onPopulationChange = (event, value?) => {\n        dispatch({\n            type: Actions.CHANGE_POPULATION,\n            value: value||event.target.value\n        })\n    };\n\n    const onNumberOfCasesChanged = (event, value?) => {\n        dispatch({\n            type: Actions.CHANGE_INITIAL_NUMBER_OF_CASES,\n            value: value||event.target.value\n        })\n    };\n\n    const onBedsChanged = (event) => {\n        dispatch({\n            type: Actions.CHANGE_BEDS,\n            value: event.target.value\n        })\n    };\n\n    const onRegionChanged = (event) => {\n        let placeName = event.target.value;\n        onPopulationChange(undefined, getPopulationData(placeName));\n        onNumberOfCasesChanged(undefined, getCovidData(placeName));\n    };\n\n    return (\n            <Paper elevation={3} className={classes.root}>\n                <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n                    <Grid item style={{...textItemStyle, paddingTop: 20}}>\n                        <RegionSelect onChange={onRegionChanged} label=\"Country / State\"></RegionSelect>\n                    </Grid>\n                    <Grid item style={textItemStyle}>\n                        <TextField label=\"Total population\"\n                                   onChange={onPopulationChange}\n                                   value={state.totalPopulation}></TextField>\n                    </Grid>\n                    <Grid item style={textItemStyle}>\n                        <KeyboardDatePicker \n                            onChange={onDateChange}\n                            variant=\"inline\" value={state.infectionStartDate} label='Start date'></KeyboardDatePicker>\n                    </Grid>\n                    <Grid item style={textItemStyle}>\n                        <TextField label=\"Active cases\"\n                            onChange={onNumberOfCasesChanged}\n                            value={state.initialNumberOfCases}></TextField>\n                    </Grid>\n                    <Grid item>\n                        <TextField label=\"Approx. hospital beds\"\n                            onChange={onBedsChanged}\n                            value={state.totalHospitalBeds}></TextField>\n                    </Grid>\n                    {sliders.map(slider => <Grid item key={slider.name}>\n                        <Slider {...slider} onChange={onSliderChange}></Slider>\n                    </Grid>)}\n                </Grid>\n            </Paper>\n               \n    )\n}\n","export const MOBILE_WIDTH = 500;\n\nexport const isMobile = () => {\n    return window.innerWidth < MOBILE_WIDTH;\n}","import React from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\nimport { isMobile } from '../../services/viewport-service';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    chartContainer: {\n        height: (isMobile()) ? 400 : 600,\n        zoom: (isMobile()) ? 0.8 : 1,\n    }\n  }),\n);\n\ninterface Props {\n    config: any;\n}\n\nexport const Chart: React.FC<Props> = ({ config }) => {\n    const classes = useStyles();\n\n    return <HighchartsReact\n            containerProps = {{ className: classes.chartContainer }}\n            highcharts={Highcharts}\n            options={config}\n      />;\n}","import React from 'react';\nimport DataGrid, { Scrolling, Column } from 'devextreme-react/data-grid';\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.light.css';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\nimport shortNum from 'short-number';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '100%'\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    gridContainer: {\n        height: 600\n    }\n  }),\n);\n\ninterface Props {\n    columns: string[];\n    data: {[key: string]: number | string}[]\n}\n\nconst renderGridCell = (data) => {\n    if(data.data.isShutdown) {\n        data.cellElement.bgColor = '#ffcccb';\n    }\n\n    return data.text;\n}\n\nexport const Table: React.FC<Props> = ({ columns, data }) => {\n    const classes = useStyles();\n\n    const customizeCellValue = (cellInfo) => {\n        if(typeof cellInfo.value === 'number') {\n            return shortNum(cellInfo.value) + '';\n        }\n\n        return cellInfo.value + '';\n    }\n\n    return <div className={classes.root}>\n        <DataGrid\n            elementAttr={{\n                class: classes.gridContainer\n            }}\n            allowColumnReordering={true}\n            allowColumnResizing={true}\n            showRowLines={true}\n            // @ts-ignore\n            dataSource={data}\n            showBorders={true}>\n            {columns.map(c => <Column \n                dataField={c}\n                cellRender={renderGridCell}\n                customizeText={customizeCellValue}/>)}\n            <Scrolling mode=\"virtual\" />\n        </DataGrid>\n    </div>\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\nimport { addWeeks, eachWeekOfInterval, differenceInWeeks } from 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport { Button, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport Paper from '@material-ui/core/Paper';\nimport Switch from '@material-ui/core/Switch';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\nexport interface Range {\n    start: Date,\n    end: Date\n};\n\nexport type ShutdownRangeState = {\n    shutdownWeeks: boolean[];\n    ranges: Range[]\n};\n\ninterface Props {\n    onChange: (ranges: ShutdownRangeState) => void;\n    computeOptimalWeeks: () => void;\n    shutdownWeeks?: boolean[];\n    startDate?: Date;\n    onDoNotOptimizeToggle?: (optimize: boolean) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        padding: theme.spacing(4)\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    },\n    marginTop: {\n        marginTop: theme.spacing(2)\n    },\n    marginLeft: {\n        marginLeft: theme.spacing(2)\n    },\n    marginLeftAuto: {\n        marginLeft: 'auto'\n    }\n  }),\n);\n\nexport const ShutdownRange: React.FC<Props> = ({ shutdownWeeks, startDate, computeOptimalWeeks, onChange, onDoNotOptimizeToggle }) => {\n    const classes = useStyles();\n    const [state, setState] = React.useState({ shutdownWeeks: [], ranges: []})\n    const [isWeekView, setIsWeekView] = React.useState(false);\n\n    const setShutdownState = (ranges: Range[], shutdownWeeks: boolean[]) => {\n        if(!shutdownWeeks) {\n            shutdownWeeks = getShutdownWeeks(ranges, startDate);\n        }\n\n        if(!ranges) {\n            ranges = getShutdownRanges(startDate, shutdownWeeks);\n        }\n\n        setState({ranges, shutdownWeeks});\n    }\n\n    React.useEffect(() => {\n        onChange(state);\n    }, [state]);\n\n    React.useEffect(() => {\n        if((!shutdownWeeks || !startDate)) {\n            return;\n        }\n        setShutdownState(null, shutdownWeeks);\n    }, [shutdownWeeks, startDate]);\n\n    const addRange = () => {\n        let rangeStart = state.ranges[state.ranges.length - 1]?.end || new Date();\n        const range = {\n            start: rangeStart,\n            end: rangeStart\n        }\n        setShutdownState([\n            ...state.ranges,\n            range\n        ], null);\n    }\n\n    const removeRange = (idx: number) => () => {\n        state.ranges.splice(idx, 1);\n        setShutdownState([...state.ranges], null);\n    }\n\n    const changeRange = range => type => date => {\n        range[type] = date;\n        if(type === 'start' && range.end < date) {\n            range.end = date;\n        }\n        setShutdownState([...state.ranges], null);\n    }\n\n    const onWeekViewToggle = (evt) => {\n        setIsWeekView(evt.target.checked);\n    }\n\n    const onWeekToggle = (evt) => {\n        state.shutdownWeeks[Number(evt.target.id)] = evt.target.checked;\n        setShutdownState(null, [...state.shutdownWeeks]);\n    }\n\n    const onDoNotOptimize = (evt) => {\n        onDoNotOptimizeToggle(evt.target.checked);\n    }\n\n    const renderRanges = () => state.ranges.map((range, idx) => <Grid container item direction=\"row\" spacing={4} alignItems=\"center\">\n        <Grid item><KeyboardDatePicker variant=\"inline\" onChange={changeRange(range)('start')}  value={range.start} label='Start'></KeyboardDatePicker></Grid>\n        <Grid item><KeyboardDatePicker variant=\"inline\" onChange={changeRange(range)('end')}  value={range.end} label='End'></KeyboardDatePicker></Grid>\n        <Grid item>\n            <IconButton onClick={removeRange(idx)} aria-label=\"delete\">\n                <DeleteIcon />\n            </IconButton>\n        </Grid>\n    </Grid>);\n\n    const renderWeeks = () => <Grid item container direction=\"row\">\n        {state.shutdownWeeks.map((week, idx) => \n            <Grid item>\n                <Grid container alignItems=\"center\">\n                    <Switch color=\"primary\" id={idx + ''} checked={week} onChange={onWeekToggle}></Switch>\n                    <Typography variant=\"caption\">{`Week ${idx + 1}`}</Typography>\n                </Grid>\n            </Grid>\n        )}\n    </Grid>\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={2}>\n                <Grid container alignItems=\"center\" justify=\"space-between\">\n                    <Tooltip title=\"Weeks when we will have a shutdown.\">\n                        <Typography className={classes.marginBottom}>Optimal Shutdown Dates</Typography>\n                    </Tooltip>\n                    <Grid item>\n                        <Grid container alignItems=\"center\">\n                            <Checkbox color=\"primary\" onChange={onDoNotOptimize}></Checkbox>\n                            <Typography variant=\"body2\">Do not optimize</Typography>\n                            <Checkbox color=\"primary\" onChange={onWeekViewToggle}></Checkbox>\n                            <Typography variant=\"body2\">Week view</Typography>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                {(isWeekView) ? renderWeeks() : renderRanges()}\n                <Grid container item className={classes.marginTop} spacing={2} alignItems=\"center\">\n                    <Button variant=\"contained\" startIcon={<AddIcon />} onClick={addRange}>Add</Button>\n                    <Button variant=\"contained\" className={classes.marginLeft}\n                        startIcon={<RotateLeftIcon />} onClick={_ => setShutdownState([], null)}>Reset</Button>\n                    {/* <Button className={classes.marginLeft}\n                        variant=\"contained\" startIcon={<DateRangeIcon />} onClick={computeOptimalWeeks}>Optimize Shutdowns</Button> */}\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\n\nfunction getShutdownRanges(startDate: Date, shutdownWeeks: boolean[]): Range[] {\n    let ranges = [];\n    let currentRange = null;\n    for(let i = 0; i<shutdownWeeks.length; i++) {\n        if(!shutdownWeeks[i] && currentRange) {\n            ranges.push(currentRange);\n            currentRange = null;\n        }\n\n        if(shutdownWeeks[i]) {\n            if(currentRange) {\n                currentRange.end = addWeeks(currentRange.end, 1);\n            } else {\n                currentRange = {\n                    start: addWeeks(startDate, i),\n                    end: addWeeks(startDate, i+1)\n                }\n            }\n        }\n    }\n    if(currentRange) {\n        ranges.push(currentRange);\n    }\n\n    return ranges;\n}\n\nfunction getShutdownWeeks(ranges, startDate) {\n    return ranges.reduce((shutdown, range) => {\n        let start = differenceInWeeks(range.start, startDate);\n        let end = differenceInWeeks(range.end, startDate);\n        for(let i = start; i < end; i++) {\n            shutdown[i] = true;\n        }\n        return shutdown;\n    }, Array(104).fill(false));\n}\n\nexport function getNumShutdownWeeks(shutdownWeeks: boolean[]) {\n    return shutdownWeeks.reduce((numWeeks, shutdown) => {\n        return numWeeks + ((shutdown) ? 1 : 0);\n    }, 0)\n}","import React, { useReducer, useEffect } from 'react';\nimport shortNum from 'short-number';\nimport { format, differenceInCalendarWeeks } from 'date-fns';\nimport { SimulatorInputState, generateData} from './data-generator';\nimport { ShutdownRangeState } from '../shudown-range/shutdown-range';\nimport { MOBILE_WIDTH } from '../../services/viewport-service';\n\nenum Actions {\n    CHANGE_CONTROL,\n    CHANGE_SHUTDOWN\n}\n\nconst reducer = (state: SimulatorInputState, action) => {\n    switch(action.type) {\n        case Actions.CHANGE_CONTROL:\n            return {\n                ...state,\n                controls: action.controls\n            }\n        case Actions.CHANGE_SHUTDOWN:\n            return {\n                ...state,\n                shutdowns: action.shutdowns\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport const useGenerateConfig = (): [SimulatorInputState, any, any, any] => {\n    const [state, dispatch] = useReducer(reducer, {\n        controls: {},\n        shutdowns: {\n            ranges: [],\n            shutdownWeeks: []\n        }\n    });\n    return [\n        state,\n        generateChartConfig(state),\n        (controls) => dispatch({type: Actions.CHANGE_CONTROL, controls}),\n        (shutdowns) => dispatch({type: Actions.CHANGE_SHUTDOWN, shutdowns})\n    ];\n}\n\n\n\n\nfunction generateChartConfig(state: SimulatorInputState) { \n    // TODO: Generate chart config here.\n    let {weeks, lastWeekNum, maxICUBeds} = generateData(state);\n    let weeksToGo = getWeeksToGo(lastWeekNum, state.controls.infectionStartDate);\n    let series = createSeries(weeks);\n    const options = {\n        subtitle: {\n            text: ''\n        },\n        title: {\n          text: ``,\n        },\n        yAxis: {\n            type: 'logarithmic',\n            title: {\n                text: 'Number of people'\n            },\n            gridLineWidth: 1,\n        },\n        xAxis: {\n            type: 'datetime',\n            title: {\n                text: 'Date'\n            },\n            gridLineWidth: 1,\n            plotBands: createShutdownBands(state.shutdowns.ranges),\n            plotLines: [{\n                value: weeks[lastWeekNum]?.weekStartDate,\n                color: '#013220'\n            }]\n        },\n        plotOptions: {\n            line: {\n                lineWidth: 5\n            }\n        },\n        tooltip: {\n            formatter: function () {\n                return `<b>${this.series.name}</b>:${shortNum(this.y)} <br>` +\n                    `${format(this.x, 'do MMM y')}`;\n            }\n        },\n        responsive: {\n            rules: [{\n                condition: {\n                    maxWidth: MOBILE_WIDTH\n                },\n                chartOptions: {\n                    plotOptions: {\n                        line: {\n                            lineWidth: 3\n                        }\n                    }\n                }\n            }]\n        },\n        series\n    }\n\n    console.log(options);\n    return {\n        config: options,\n        weeks,\n        weeksToGo,\n        maxICUBeds\n    };\n}\n\nfunction createShutdownBands(shutdowns: {start: Date, end: Date}[]) {\n    return shutdowns.map(s => {\n        return {\n            color: '#ffcccb',\n            from: s.start,\n            to: s.end\n        };\n    })\n}\n\n\nfunction createSeries(data) {\n    let series = {};\n    data.forEach(obj => {\n        Object.keys(obj).forEach(key => {\n            series[key] = series[key] || {name: key, data: [], visible: false};\n            series[key].data.push({\n                x: obj.weekStartDate,\n                y: obj[key]\n            });\n        });\n    });\n    delete series['week'];\n    delete series['weekNum'];\n    delete series['healthy'];\n    delete series['weekStartDate'];\n    delete series['recovered'];\n    delete series['isShutdown'];\n    delete series['currentlyInfected'];\n\n    series['hospitalized'].visible = true;\n    series['dead'].visible = true;\n    series['newInfected'].visible = true;\n    return Object.values(series);\n}\n\nfunction getWeeksToGo(lastWeekNum, startDate) {\n    const currentWeekNum = differenceInCalendarWeeks(new Date(), startDate);\n    return lastWeekNum - currentWeekNum;\n}","import { addWeeks, isWithinInterval } from 'date-fns';\nimport { ControlState } from '../controls/controls';\nimport { ShutdownRangeState } from '../shudown-range/shutdown-range';\n\nexport interface SimulatorInputState {\n    controls: ControlState;\n    shutdowns: ShutdownRangeState;\n}\n\nexport class Week {\n    weekStartDate: Date;\n    weekNum: number;\n    healthy: number = 0;\n    newInfected: number = 0;\n    totalInfected: number = 0;\n    currentlyInfected = 0;\n    recovered = 0;\n    dead = 0;\n    hospitalized = 0;\n    isShutdown: boolean = false;\n\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n\nexport function generateData(state: SimulatorInputState) {\n    let {\n        totalPopulation,\n        infectionStartDate,\n        R0,\n        shutdownR0,\n        mortalityRate,\n        mortalityRateOverflow,\n        initialNumberOfCases,\n        hospitalizationRate,\n        totalHospitalBeds,\n        hospitalStayInWeeks } = state.controls;\n    mortalityRate = mortalityRate / 100;\n    mortalityRateOverflow = mortalityRateOverflow / 100;\n    hospitalizationRate = hospitalizationRate / 100;\n\n    let weeks = [new Week({\n        weekStartDate: infectionStartDate,\n        weekNum: 0,\n        healthy: totalPopulation - initialNumberOfCases,\n        newInfected: initialNumberOfCases,\n        totalInfected: initialNumberOfCases,\n        currentlyInfected: initialNumberOfCases,\n        recovered: 0,\n        dead: 0,\n        hospitalized: 0\n    })];\n    let lastWeekNum, maxICUBeds = 0;\n\n    for(let i=1; i<104; i++) {\n        weeks[i] = new Week();\n        weeks[i].weekStartDate = addWeeks(infectionStartDate, i);\n        weeks[i].weekNum = i;\n        weeks[i].isShutdown = state.shutdowns.shutdownWeeks[i];\n        let r = (weeks[i].isShutdown)\n            ? shutdownR0 \n            : R0;\n\n        let fractionHealthy = (weeks[i-1].healthy) / totalPopulation;\n        let mortality = (weeks[i-1].hospitalized < totalHospitalBeds)\n            ? mortalityRate\n            : weightedAverage(mortalityRate, mortalityRateOverflow,\n                totalHospitalBeds, weeks[i-1].hospitalized - totalHospitalBeds);\n\n        weeks[i].newInfected = Math.floor(weeks[i-1].newInfected * r * fractionHealthy);\n        weeks[i].currentlyInfected = Math.floor(weeks[i].newInfected + weeks[i-1].newInfected\n                + ((i >= 2) ? weeks[i-2].newInfected : 0));\n        weeks[i].totalInfected = weeks[i-1].totalInfected + weeks[i].newInfected;\n\n        // 3 weeks later patients either die or recover.\n        if(i >= 3) {\n            weeks[i].dead = Math.floor(weeks[i-1].dead + weeks[i - 3].newInfected * mortality);\n            weeks[i].recovered = Math.floor(weeks[i-1].recovered + (weeks[i -3].newInfected *  ( 1 - mortality)));\n        }\n        if(i > 2) {\n            weeks[i].hospitalized =  Math.floor(weeks[i -2].newInfected * hospitalizationRate * hospitalStayInWeeks);\n        }\n        weeks[i].healthy = totalPopulation - (weeks[i].currentlyInfected + weeks[i].recovered + weeks[i].dead); \n\n        if(weeks[i].hospitalized * 0.4 > maxICUBeds) {\n            maxICUBeds = Math.round(weeks[i].hospitalized * 0.4);\n        }\n\n        if(weeks[i].currentlyInfected === 0 && !lastWeekNum) {\n            lastWeekNum = i;\n        }\n    }\n\n    return {\n        lastWeekNum,\n        weeks,\n        maxICUBeds\n    };\n}\n\nexport function weightedAverage(p0: number, p1: number, w0: number, w1: number) {\n    return ((p0 * w0) + (p1 * w1)) / (w0 + w1);\n}\n\nfunction isShutdown(week, shutdowns) {\n    try {\n        return  shutdowns.some(shutdown => isWithinInterval(week, shutdown));\n    } catch {\n        return false;\n    }\n}","import { ControlState } from '../controls/controls';\nimport { Week, weightedAverage, generateData } from './data-generator';\nimport { differenceInCalendarWeeks } from 'date-fns';\n\nexport function getOptimalWeeks(state: ControlState) {\n    const {\n        totalPopulation,\n        totalHospitalBeds,\n        shutdownR0,\n        infectionStartDate,\n        initialNumberOfCases\n    } = state;\n\n    let weeks = [new Week({\n        newInfected: initialNumberOfCases,\n        totalInfected: initialNumberOfCases,\n        currentlyInfected: initialNumberOfCases,\n        healthy: totalPopulation - initialNumberOfCases\n    })];\n\n    let shutdown = Array(104).fill(false);\n\n    if(shutdownR0 < 1) {\n        return getDeprecatingOptimalWeeks(state);\n    }\n\n\n    for(let i = 1; i< 104; i++) {\n        let current: Week, next: Week, next2: Week;\n        current = computeNextWeek(state, false,\n            weeks[i - 1], (i >= 2) ? weeks[i-2] : null, (i >= 3) ? weeks[i - 3] : null);\n        next = computeNextWeek(state, true,\n            current, weeks[i-1], (i >= 2) ? weeks[i-2] : null);\n        next2 = computeNextWeek(state, true,\n            next, current, weeks[i-1]);\n\n        if(current.hospitalized > totalHospitalBeds ||\n            next.hospitalized > totalHospitalBeds ||\n            next2.hospitalized > totalHospitalBeds) {\n                shutdown[i] = true;\n                weeks[i] = computeNextWeek(state, shutdown[i],\n                    weeks[i - 1], (i >= 2) ? weeks[i -2] : null, (i >= 3) ? weeks[i - 3] : null);\n        } else {\n            shutdown[i] = false;\n            weeks[i] = current;\n        }\n    }\n\n    return shutdown;\n}\n\nfunction computeNextWeek(state: ControlState, shutdown: boolean, prev: Week, prev2: Week, prev3: Week): Week {\n    let {\n        R0,\n        shutdownR0,\n        totalPopulation,\n        totalHospitalBeds,\n        mortalityRate,\n        mortalityRateOverflow,\n        hospitalizationRate\n    } = state;\n    mortalityRate = mortalityRate / 100;\n    mortalityRateOverflow = mortalityRateOverflow / 100;\n    hospitalizationRate = hospitalizationRate / 100;\n\n    let result: Week = new Week();\n    const r = (shutdown) ? shutdownR0 : R0;\n    const fractionHealthy = prev.healthy / totalPopulation;\n\n    // Mortality depends on how much overflow there is in the hospitals compared capacity\n    let mortality = (prev.hospitalized < totalHospitalBeds) ? mortalityRate :\n        weightedAverage(mortalityRate, mortalityRateOverflow,\n        totalHospitalBeds, prev.hospitalized - totalHospitalBeds);\n    \n    result.newInfected = Math.round(prev.newInfected * r * fractionHealthy);\n    // Last 2 week + current week's newly infected are still infected. \n    result.currentlyInfected = result.newInfected + prev.newInfected + ((prev2 != null) ? prev2.newInfected : 0);\n    result.totalInfected = prev.totalInfected + result.newInfected;\n    // 3 weeks later patients either die or recover.\n    if (prev3 != null) {\n        result.dead = prev.dead + prev3.newInfected * mortality;\n        result.recovered = prev.recovered + (prev3.newInfected *  ( 1 - mortality));\n    }\n    // We are considering that patients are in hopsital in their third week.\n    if (prev2 != null) {\n        result.hospitalized =  prev2.newInfected * hospitalizationRate;\n    } \n    result.healthy = totalPopulation - (result.currentlyInfected + result.recovered + result.dead);\n    return result; \n}\n\nfunction getDeprecatingOptimalWeeks(state: ControlState) {\n    let {\n        R0,\n        shutdownR0,\n        totalPopulation,\n        totalHospitalBeds,\n        infectionStartDate,\n        mortalityRateOverflow,\n        hospitalizationRate\n    } = state;\n    let { weeks } = generateData({ controls: state, shutdowns: {shutdownWeeks: [], ranges: []}});\n    let currentWeekNum = differenceInCalendarWeeks(new Date(), infectionStartDate);\n    let currentNewInfected = weeks[currentWeekNum ].newInfected;\n\n    let shutdownsToZero = Math.ceil(-Math.log(currentNewInfected) / Math.log(shutdownR0));\n\n    let shutdown = Array(104).fill(false);\n    for(let i = currentWeekNum; i<currentWeekNum + shutdownsToZero; i++) {\n        shutdown[i] = true;\n    }\n\n    return shutdown;\n}","import React from 'react';\nimport 'date-fns';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport {Controls} from '../controls/controls';\nimport {Chart} from '../chart/chart';\nimport { Table } from '../table/table';\nimport {ShutdownRange, getNumShutdownWeeks} from '../shudown-range/shutdown-range';\nimport {useGenerateConfig} from './use-generate-config';\nimport {getOptimalWeeks} from './optimal-weeks-generator';\nimport {\n    MuiPickersUtilsProvider,\n } from '@material-ui/pickers';\nimport shortNum from 'short-number';\nimport Switch from '@material-ui/core/Switch';\nimport { Paper, Typography } from '@material-ui/core';\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Headline } from '../headline/headline';\nimport { isMobile } from '../../services/viewport-service';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    leftPanel: {\n        flex: (isMobile()) ? `1 1 300px` : `0 0 300px`\n    },\n    grow: {\n        flexGrow: 1,\n        flexBasis: 0,\n        minHeight: 0\n    },\n    contentContainer: {\n        flex: '1 0 0',\n        height: (isMobile()) ? 390 : 720,\n        marginBottom: theme.spacing(2)\n    },\n    content: {\n        padding: (isMobile()) ? 0 : theme.spacing(4),\n        flex: '1 1 0',\n        minHeight: 0,\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    },\n    noMobile: {\n        display: (isMobile()) ? `none`: 'initial'\n    }\n  }),\n);\n\nconst TABLE_COLUMNS = ['weekNum', 'healthy', 'newInfected', 'totalInfected', 'currentlyInfected', 'dead', 'hospitalized'];\nconst initialShutdownWeeks = Array(104).fill(false);\nfor(let i = 14;i<30;i++) {\n    initialShutdownWeeks[i] = true;\n}\nfor(let i = 36;i<51;i++) {\n    initialShutdownWeeks[i] = true;\n}\n\nexport const Simulator: React.FC = () => {\n    const classes = useStyles();\n    const [\n        state, \n        {config, weeks, weeksToGo, maxICUBeds},\n        onControlChange, \n        onShutdownChange] = useGenerateConfig();\n    const [optimalWeeks, setOptimalWeeks] = React.useState<boolean[]>(initialShutdownWeeks);\n    const [isTableView, setIsTableView] = React.useState(false);\n    const [doNotOptimize, setDoNotOptimize] = React.useState(false);\n\n    const computeOptimalWeeks = () => {\n        setOptimalWeeks(getOptimalWeeks(state.controls));\n    }\n\n    React.useEffect(() => {\n        if(doNotOptimize) {\n            return;\n        }\n\n        setOptimalWeeks(getOptimalWeeks(state.controls));\n    }, [state.controls])\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container spacing={2} direction='row'>\n                <Grid item className={classes.leftPanel}>\n                    <Controls onChange={onControlChange}></Controls>\n                </Grid>\n                <Grid container item direction=\"column\" className={classes.grow} spacing={2}>\n                    <Grid item className={classes.noMobile}>\n                        <ShutdownRange\n                            shutdownWeeks={optimalWeeks}\n                            startDate={state.controls.infectionStartDate}\n                            computeOptimalWeeks={computeOptimalWeeks}\n                            onDoNotOptimizeToggle={setDoNotOptimize}\n                            onChange={onShutdownChange}></ShutdownRange>\n                    </Grid>\n                    <Grid item container\n                        direction=\"row\"  spacing={2}>\n                        <Grid item className={classes.grow}> \n                            <Headline title=\"Total Shutdown\"\n                                tooltip=\"Total number of weeks of shutdown\"\n                                value={`${getNumShutdownWeeks(state.shutdowns.shutdownWeeks)} weeks`}></Headline>\n                        </Grid>\n                        <Grid item className={classes.grow}> \n                            <Headline \n                                tooltip=\"Number of weeks to complete irradication of coronavirus.\"\n                                title=\"Time before the virus dies\" value={(!isNaN(weeksToGo)) ? `${weeksToGo} weeks` : `> 2 years`}></Headline>\n                        </Grid>\n                        <Grid item className={classes.grow}>\n                            <Headline title=\"Approximate Deaths\"\n                                 tooltip=\"Number of people expected to die due to the Virus.\"\n                                 value={shortNum(weeks[weeks.length - 1].dead)}></Headline>\n                        </Grid>\n                        <Grid item className={classes.grow}>\n                            <Headline title=\"ICU Beds needed\"\n                                 tooltip=\"Number of beds short in the ICU to support the pandemic.\"\n                                 value={shortNum(maxICUBeds)}></Headline>\n                        </Grid>\n                    </Grid>\n                    <Grid item container direction=\"column\" className={classes.contentContainer}>\n                        <Paper elevation={3} className={classes.content}>\n                            <Grid container direction=\"column\" wrap=\"nowrap\" className={classes.grow}>\n                                <Grid item style={{ marginLeft: 'auto'}}>\n                                    <Typography variant=\"caption\">Table View</Typography>\n                                    <Switch color=\"primary\" id='switcher' checked={isTableView} onChange={() => setIsTableView(!isTableView)}></Switch>\n                                </Grid>\n                                <Grid item className={classes.grow} style={{ display: 'flex', flexDirection: 'column', maxWidth: '100vw'}}>\n                                    {(isTableView) ? <Table\n                                        columns={TABLE_COLUMNS} \n                                        data={weeks}></Table>\n                                        : <Chart config={config}></Chart>}\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Typography } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\ninterface Props {\n    title: string;\n    value: string;\n    tooltip: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        padding: theme.spacing(2),\n        paddingRight: theme.spacing(4),\n        flexGrow: 1,\n        minWidth: 170\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    },\n    marginTop: {\n        marginTop: theme.spacing(2)\n    },\n    marginLeft: {\n        marginLeft: theme.spacing(2)\n    },\n    marginLeftAuto: {\n        marginLeft: 'auto'\n    }\n  }),\n);\n\nexport const Headline: React.FC<Props> = ({ title, value, tooltip }) => {\n    const classes = useStyles();\n\n    return <Paper className={classes.root} elevation={3}>\n        <Tooltip title={tooltip}>\n            <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={3}>\n                <Grid item>\n                    <Typography variant=\"body2\">{title}</Typography>\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"h5\">{value}</Typography>\n                </Grid>\n            </Grid>\n        </Tooltip>\n    </Paper>\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport qs from 'query-string';\nimport './App.css';\n\nimport {Simulator} from './components/simulator/simulator';\nimport { Container } from '@material-ui/core';\nimport {useInitCovidData} from \"./api\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    container: {\n      paddingTop: theme.spacing(2)\n    }\n  }),\n);\nconst urlParams = qs.parse(window.location.search);\n\nfunction App() {\n  const classes = useStyles();\n  const covidDataLoaded = useInitCovidData();\n  const isEmbed = !!urlParams.embed;\n\n  return (\n    <div className=\"App\">\n      {!isEmbed && <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            COVID Simulator\n          </Typography>\n        </Toolbar>\n      </AppBar>}\n      <Container maxWidth='lg' className={classes.container}>\n          {(covidDataLoaded) ? <Simulator /> : <div>Loading ...</div>}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.        xssadsaasdasdasdasdasdasdasdasdasd\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}